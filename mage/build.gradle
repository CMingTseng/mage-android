apply plugin: 'com.android.application'

def serverURL = hasProperty('SERVER_URL') ? SERVER_URL : ''
def googleMapsApiReleaseKey = hasProperty('RELEASE_MAPS_API_KEY') ? RELEASE_MAPS_API_KEY: ''
def googleMapsApiDebugKey = hasProperty('DEBUG_MAPS_API_KEY') ? DEBUG_MAPS_API_KEY: ''

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    dexOptions {
        javaMaxHeapSize "4g"
    }

    sourceSets {
        androidTest.setRoot('tests')
        androidTest.java.srcDirs = ['tests/src']
    }

    defaultConfig {
        applicationId "mil.nga.giat.mage"
        minSdkVersion 17
        targetSdkVersion 25
        multiDexEnabled true
        resValue "string", "serverURLDefaultValue", serverURL
        resValue "string", "recentMapXYZDefaultValue", "263.0,40.0,3"
        resValue "bool", "isWearBuildDefaultValue", "false"
        //buildConfigField "String", "EXTRALOGGING", "\"true\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            resValue "string", "GOOGLE_MAPS_ANDROID_API_KEY", googleMapsApiReleaseKey
        }
        debug {
            minifyEnabled false
            resValue "string", "GOOGLE_MAPS_ANDROID_API_KEY", googleMapsApiDebugKey
        }
    }

    productFlavors {
        defaults {
            // if you build without a flavor gradle will build all flavors.
            // Lets define this flavor to provide a flavor we can build with no overrides
        }

        local {
            resValue "string", "serverURLDefaultValue", "http://192.168.1.1:4242"
            //resValue "string", "usernameDefaultValue", "admin"
            resValue "integer", "gpsSensitivityDefaultValue", "1"
        }

        wear {
            resValue "bool", "isWearBuildDefaultValue", "true"
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/INDEX.LIST'
    }
}

dependencies {

    // this block allows the mage-android-wear-bridge to be pulled in dynamically when that flavor is built
    gradle.startParameter.taskRequests.each { taskRequest ->
        taskRequest.args.each { taskName ->
            String flavorName = "wear";
            if (taskName.toLowerCase().contains(flavorName.toLowerCase())) {
                //wearCompile project(':bridge') // uncomment me to build wearable locally
                wearCompile "mil.nga.giat.mage.wearable:bridge:1.0.0" // uncomment me to build wearable.  comment me if building wearable locally.
            }
        }
    }

    compile project(':sdk') // uncomment me to build locally
    //compile "mil.nga.giat.mage:sdk:5.3.0" // comment me to build locally
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:support-v13:25.1.1'
    compile 'com.android.support:recyclerview-v7:25.1.1'
    compile 'com.android.support:appcompat-v7:25.1.1'
    compile 'com.android.support:design:25.1.1'
    compile 'com.android.support:cardview-v7:25.1.1'
    compile 'com.android.support:preference-v7:25.1.1'
    compile 'com.android.support:preference-v14:25.1.1'
    compile 'com.google.android.gms:play-services:10.0.1'
    compile 'com.google.maps.android:android-maps-utils:0.3.3'
    compile 'org.ocpsoft.prettytime:prettytime:3.2.5.Final'
    compile 'com.github.bumptech.glide:glide:3.6.1'
    compile 'com.github.bumptech.glide:okhttp-integration:1.3.1@aar'
    compile files('libs/GeocoderPlus.jar')
}

configure extensions.android, {
    if (project.hasProperty('RELEASE_STORE_FILE') && new File((String)project.getProperty('RELEASE_STORE_FILE')).exists()) {
        signingConfigs {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
        buildTypes {
            release {
                setSigningConfig(signingConfigs.release)
            }
        }
    }
    else {
        println 'no release keystore configured'
    }
}
